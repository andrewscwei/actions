on:
  workflow_call:
    inputs:
      test-reporter:
        description: Test reporter type
        required: false
        type: string
      test-report-path:
        description: Path to the test report
        required: false
        type: string
      create-release:
        default: false
        description: Specifies if creating release
        type: boolean
      skip-tests:
        default: false
        description: Specifies if tests should run
        type: boolean
      artifacts-name:
        description: Name of the artifacts to download
        required: false
        type: string
      artifacts-path:
        description: Path (relative to working directory) to download artifacts to
        required: false
        type: string
      use-mongo-version:
        description: Enables MongoDB service and uses the specified version
        type: string
    secrets:
      gh-access-token:
        description: GitHub access token for checking out private repos
        required: false
      npm-auth-token:
        description: NPM auth token
        required: true
jobs:
  deploy:
    name: NPM
    runs-on: ubuntu-latest
    services:
      mongodb:
        image: ${{ inputs.use-mongo-version && format('mongo:{0}', inputs.use-mongo-version) || '' }}
        ports:
          - 27017:27017
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: recursive
          token: ${{ secrets.gh-access-token && secrets.gh-access-token || github.token }}
      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version-file: .nvmrc
          registry-url: https://registry.npmjs.org
      - name: Cache Node modules
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-build-npm-cache-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-npm-cache-
            ${{ runner.os }}-build-
            ${{ runner.os }}-
      - name: Install Node modules
        run: npm install
      - name: Download artifacts
        if: ${{ inputs.artifacts-name }}
        uses: actions/download-artifact@v3
        with:
          name: ${{ inputs.artifacts-name }}
          path: ${{ inputs.artifacts-path }}
      - name: Deploy to NPM
        if: ${{ inputs.create-release }}
        env:
          NODE_AUTH_TOKEN: ${{ secrets.npm-auth-token }}
        run: |-
          if npm publish; then
            echo "Successfully published to NPM" >> $GITHUB_OUTPUT
          else
            echo "Failed to publish to NPM" >> $GITHUB_OUTPUT
            exit 1
          fi
      - name: Create release
        if: ${{ inputs.create-release }}
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.github_token }}
          script: |
            const tag = process.env.GITHUB_REF.split('/').slice(-1)[0]

            try {
              await github.rest.repos.createRelease({
                draft: false,
                generate_release_notes: true,
                name: tag,
                owner: context.repo.owner,
                prerelease: false,
                repo: context.repo.repo,
                tag_name: tag,
              })
            }
            catch (error) {
              core.setFailed(error.message)
            }
