on:
  workflow_call:
    inputs:
      artifacts-name:
        default: build-artifacts
        description: Name of the artifacts to download
        type: string
      artifacts-path:
        description: Path (relative to working directory) to download artifacts to
        required: false
        type: string
      branch-name:
        default: gh-pages
        description: Branch for GitHub Pages
        type: string
      create-release:
        default: false
        description: Specifies if a release should be created
        type: boolean
      deploy-path:
        description: Path to deploy to GitHub Pages
        default: .gh-pages
        type: string
      predeploy-command:
        description: Command to run before deploying
        required: false
        type: string
    secrets:
      gh-access-token:
        description: GitHub access token for checking out private repos
        required: false
jobs:
  deploy:
    name: GitHub Pages
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: recursive
          token: ${{ secrets.gh-access-token && secrets.gh-access-token || github.token }}
      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version-file: .node-version
      - name: Cache Node modules
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-build-npm-cache-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-npm-cache-
            ${{ runner.os }}-build-
            ${{ runner.os }}-
      - name: Install Node modules
        run: npm install
      - name: Download artifacts
        if: ${{ inputs.artifacts-path }}
        uses: actions/download-artifact@v3
        with:
          name: ${{ inputs.artifacts-name }}
          path: ${{ inputs.artifacts-path }}
      - name: Run
        if : ${{ inputs.predeploy-command }}
        run: ${{ inputs.predeploy-command }}
      - name: Create release
        if: ${{ inputs.create-release }}
        uses: actions/github-script@v6
        with:
          github-token: ${{ github.token }}
          script: |
            const tag = process.env.GITHUB_REF.split('/').slice(-1)[0]

            try {
              await github.rest.repos.createRelease({
                draft: false,
                generate_release_notes: true,
                name: tag,
                owner: context.repo.owner,
                prerelease: false,
                repo: context.repo.repo,
                tag_name: tag,
              })
            }
            catch (error) {
              core.setFailed(error.message)
            }
      - name: Deploy to GitHub Pages
        env:
          BRANCH_NAME: ${{ inputs.branch-name }}
          DEPLOY_PATH: ${{ inputs.deploy-path }}
        run: |-
          ORIGIN_URL="https://${GITHUB_ACTOR}:${{ github.token }}@github.com/${GITHUB_REPOSITORY}.git"

          # Checkout new branch
          if [[ `git branch | grep $BRANCH_NAME` ]]; then git branch -D $BRANCH_NAME; fi
          git checkout -b $BRANCH_NAME

          # Move target files to root, then delete everything else
          find . -maxdepth 1 ! -name '.' ! -name '..' ! -name ${DEPLOY_PATH} ! -name '.git' ! -name '.gitignore' -exec rm -rf {} \;
          mv ${DEPLOY_PATH}/* .
          rm -R ${DEPLOY_PATH}/

          # Push to branch.
          git config user.name "$GITHUB_ACTOR"
          git config user.email "$GITHUB_ACTOR@users.noreply.github.com"
          git add -fA
          git commit --allow-empty -m "[SKIP CI] $(git log -1 --pretty=%B)"
          git push -f $ORIGIN_URL $BRANCH_NAME

          if [ $? -ne 0 ]; then
            exit 1
          else
            echo "Successfully published docs to GitHub Pages"
          fi
